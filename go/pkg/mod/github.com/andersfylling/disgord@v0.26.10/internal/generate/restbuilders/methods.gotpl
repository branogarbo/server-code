package disgord

// Code generated - This file has been automatically generated by generate/restbuilders/main.go - DO NOT EDIT.
// Warning: This file is overwritten by the "go generate" command
// This file holds all the basic RESTBuilder methods a builder is expected to.

{{ range $builder := . }}{{ $builderCap := Capitalize $builder.Name }}

// {{ $builderCap }} is the interface for the builder.
type {{ $builderCap }} interface {
   {{ if .BasicExecMethod }}
   {{ with $be := $builder.BasicExec }}
   Execute() ({{ if ne $be.Name "err" }}{{ $be.Name }} {{ $be.Type }},{{end}} err error)
   {{ end }}{{ end }}IgnoreCache() {{$builderCap}}
   CancelOnRatelimit() {{$builderCap}}
   URLParam(name string, v interface{}) {{$builderCap}}
   Set(name string, v interface{}) {{$builderCap}}
   {{ range $i, $p := .Params }}Set{{ $p.MethodName }}({{ $p.MethodName | Decapitalize }} {{ $p.Type }}) {{$builderCap}}
   {{ end }}{{ if eq $builder.Name "updateGuildMemberBuilder" }}
   KickFromVoice() UpdateGuildMemberBuilder
   DeleteNick() UpdateGuildMemberBuilder
   {{ end }}
}

// IgnoreCache will not fetch the data from the cache if available, and always execute a
// a REST request. However, the response will always update the cache to keep it synced.
func (b *{{$builder.Name}}) IgnoreCache() {{$builderCap}} {
    b.{{ $builder.FieldName }}.IgnoreCache()
    return b
}

// CancelOnRatelimit will disable waiting if the request is rate limited by Discord.
func (b *{{$builder.Name}}) CancelOnRatelimit() {{$builderCap}} {
    b.{{ $builder.FieldName }}.CancelOnRatelimit()
    return b
}

// URLParam adds or updates an existing URL parameter.
// eg. URLParam("age", 34) will cause the URL `/test` to become `/test?age=34`
func (b *{{$builder.Name}}) URLParam(name string, v interface{}) {{$builderCap}} {
    b.{{ $builder.FieldName }}.queryParam(name, v)
    return b
}

// Set adds or updates an existing a body parameter
// eg. Set("age", 34) will cause the body `{}` to become `{"age":34}`
func (b *{{$builder.Name}}) Set(name string, v interface{}) {{$builderCap}} {
    b.{{ $builder.FieldName }}.body[name] = v
    return b
}

{{ range $i, $p := .Params }}
func (b *{{$builder.Name}}) Set{{ $p.MethodName }}({{ $p.MethodName | Decapitalize }} {{ $p.Type }}) {{$builderCap}} {
    {{- if $p.HasCond }}
    b.{{ $builder.FieldName }}.addPrereq{{ $p.MethodName | Decapitalize | $p.Cond.Render }}
    {{end}}
    {{- if eq $p.Type "Snowflake" -}}
    b.{{ $builder.FieldName }}.addPrereq({{ $p.MethodName | Decapitalize }}.IsZero(), "{{ $p.MethodName | Decapitalize }} can not be 0")
    {{- end }}
    b.{{ $builder.FieldName }}.param("{{ $p.Name }}", {{ $p.MethodName | Decapitalize }})
    return b
}
{{ end }}

{{ if .BasicExecMethod }}
{{ with $be := $builder.BasicExec }}
func (b *{{$builder.Name}}) Execute() ({{ if ne $be.Name "err" }}{{ $be.Name }} {{ $be.Type }},{{end}} err error) {
	{{- if ne $be.Name "err" -}}
	var v interface{}
	if v, err = b.r.execute(); err != nil {
		return nil, err
	}

        {{- if $be.IsSlice }}
    tmp := v.(*{{ $be.Type }})
    return *tmp, nil
        {{- else}}
    return v.({{ $be.Type }}), nil
        {{- end}}
    {{- else}}
    _, err = b.r.execute()
    return
    {{- end }}
}
{{ end }}
{{ end }}

{{ end }}